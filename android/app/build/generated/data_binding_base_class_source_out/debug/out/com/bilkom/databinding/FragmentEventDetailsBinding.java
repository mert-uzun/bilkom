// Generated by view binder compiler. Do not edit!
package com.bilkom.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bilkom.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentEventDetailsBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final TextView eventDate;

  @NonNull
  public final TextView eventDateLabel;

  @NonNull
  public final TextView eventDescription;

  @NonNull
  public final TextView eventDescriptionLabel;

  @NonNull
  public final TextView eventLocation;

  @NonNull
  public final TextView eventLocationLabel;

  @NonNull
  public final TextView eventParticipants;

  @NonNull
  public final TextView eventParticipantsLabel;

  @NonNull
  public final LinearLayout eventTagsContainer;

  @NonNull
  public final TextView eventTagsLabel;

  @NonNull
  public final TextView eventTitle;

  @NonNull
  public final Button joinButton;

  @NonNull
  public final Button withdrawButton;

  private FragmentEventDetailsBinding(@NonNull NestedScrollView rootView,
      @NonNull TextView eventDate, @NonNull TextView eventDateLabel,
      @NonNull TextView eventDescription, @NonNull TextView eventDescriptionLabel,
      @NonNull TextView eventLocation, @NonNull TextView eventLocationLabel,
      @NonNull TextView eventParticipants, @NonNull TextView eventParticipantsLabel,
      @NonNull LinearLayout eventTagsContainer, @NonNull TextView eventTagsLabel,
      @NonNull TextView eventTitle, @NonNull Button joinButton, @NonNull Button withdrawButton) {
    this.rootView = rootView;
    this.eventDate = eventDate;
    this.eventDateLabel = eventDateLabel;
    this.eventDescription = eventDescription;
    this.eventDescriptionLabel = eventDescriptionLabel;
    this.eventLocation = eventLocation;
    this.eventLocationLabel = eventLocationLabel;
    this.eventParticipants = eventParticipants;
    this.eventParticipantsLabel = eventParticipantsLabel;
    this.eventTagsContainer = eventTagsContainer;
    this.eventTagsLabel = eventTagsLabel;
    this.eventTitle = eventTitle;
    this.joinButton = joinButton;
    this.withdrawButton = withdrawButton;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentEventDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentEventDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_event_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentEventDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.event_date;
      TextView eventDate = ViewBindings.findChildViewById(rootView, id);
      if (eventDate == null) {
        break missingId;
      }

      id = R.id.event_date_label;
      TextView eventDateLabel = ViewBindings.findChildViewById(rootView, id);
      if (eventDateLabel == null) {
        break missingId;
      }

      id = R.id.event_description;
      TextView eventDescription = ViewBindings.findChildViewById(rootView, id);
      if (eventDescription == null) {
        break missingId;
      }

      id = R.id.event_description_label;
      TextView eventDescriptionLabel = ViewBindings.findChildViewById(rootView, id);
      if (eventDescriptionLabel == null) {
        break missingId;
      }

      id = R.id.event_location;
      TextView eventLocation = ViewBindings.findChildViewById(rootView, id);
      if (eventLocation == null) {
        break missingId;
      }

      id = R.id.event_location_label;
      TextView eventLocationLabel = ViewBindings.findChildViewById(rootView, id);
      if (eventLocationLabel == null) {
        break missingId;
      }

      id = R.id.event_participants;
      TextView eventParticipants = ViewBindings.findChildViewById(rootView, id);
      if (eventParticipants == null) {
        break missingId;
      }

      id = R.id.event_participants_label;
      TextView eventParticipantsLabel = ViewBindings.findChildViewById(rootView, id);
      if (eventParticipantsLabel == null) {
        break missingId;
      }

      id = R.id.event_tags_container;
      LinearLayout eventTagsContainer = ViewBindings.findChildViewById(rootView, id);
      if (eventTagsContainer == null) {
        break missingId;
      }

      id = R.id.event_tags_label;
      TextView eventTagsLabel = ViewBindings.findChildViewById(rootView, id);
      if (eventTagsLabel == null) {
        break missingId;
      }

      id = R.id.event_title;
      TextView eventTitle = ViewBindings.findChildViewById(rootView, id);
      if (eventTitle == null) {
        break missingId;
      }

      id = R.id.join_button;
      Button joinButton = ViewBindings.findChildViewById(rootView, id);
      if (joinButton == null) {
        break missingId;
      }

      id = R.id.withdraw_button;
      Button withdrawButton = ViewBindings.findChildViewById(rootView, id);
      if (withdrawButton == null) {
        break missingId;
      }

      return new FragmentEventDetailsBinding((NestedScrollView) rootView, eventDate, eventDateLabel,
          eventDescription, eventDescriptionLabel, eventLocation, eventLocationLabel,
          eventParticipants, eventParticipantsLabel, eventTagsContainer, eventTagsLabel, eventTitle,
          joinButton, withdrawButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
