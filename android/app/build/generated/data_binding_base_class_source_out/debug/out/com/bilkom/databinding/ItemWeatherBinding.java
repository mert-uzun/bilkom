// Generated by view binder compiler. Do not edit!
package com.bilkom.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bilkom.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemWeatherBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView humidityText;

  @NonNull
  public final TextView temperatureText;

  @NonNull
  public final TextView weatherDescription;

  @NonNull
  public final ImageView weatherIcon;

  @NonNull
  public final TextView windText;

  private ItemWeatherBinding(@NonNull CardView rootView, @NonNull TextView humidityText,
      @NonNull TextView temperatureText, @NonNull TextView weatherDescription,
      @NonNull ImageView weatherIcon, @NonNull TextView windText) {
    this.rootView = rootView;
    this.humidityText = humidityText;
    this.temperatureText = temperatureText;
    this.weatherDescription = weatherDescription;
    this.weatherIcon = weatherIcon;
    this.windText = windText;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemWeatherBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemWeatherBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_weather, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemWeatherBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.humidityText;
      TextView humidityText = ViewBindings.findChildViewById(rootView, id);
      if (humidityText == null) {
        break missingId;
      }

      id = R.id.temperatureText;
      TextView temperatureText = ViewBindings.findChildViewById(rootView, id);
      if (temperatureText == null) {
        break missingId;
      }

      id = R.id.weatherDescription;
      TextView weatherDescription = ViewBindings.findChildViewById(rootView, id);
      if (weatherDescription == null) {
        break missingId;
      }

      id = R.id.weatherIcon;
      ImageView weatherIcon = ViewBindings.findChildViewById(rootView, id);
      if (weatherIcon == null) {
        break missingId;
      }

      id = R.id.windText;
      TextView windText = ViewBindings.findChildViewById(rootView, id);
      if (windText == null) {
        break missingId;
      }

      return new ItemWeatherBinding((CardView) rootView, humidityText, temperatureText,
          weatherDescription, weatherIcon, windText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
